                        =========================
                        Image processing with MPI
                        =========================


  The goal of this project is to build an MPI program that can apply multiple
filters on images. Filters are an elemental and basic part of image processing.
Many algorithms use a workflow of predefined filters in order to enhance certain
characteristics of an image. In order to apply a filter to an image, we update
the value of each pixel with the sum of the resulting values by multiplying each
element from the filter kernel matrix with the value of each pixel and its
surrounding neighbors. The number of neighbors depends on the size of the kernel
matrix. For this project we only consider filters of 3 × 3.
  The program will take as input an image and will apply any combination of the
following filters on it: “smooth”, “blur”, “sharpen”, “mean” and “emboss”.

A. Smoothing filter The goal here is to create a modify the pixel so that it
takes the mean value of itself and all the pixels around it:
K = 1 / 9 * [ 1 1 1
              1 1 1
              1 1 1 ]

B. Approximative Gaussian Blur filter The goal of this filter is to reduce image noise and detail:
K = 1 / 16 * [ 1 2 1
               2 4 2
               1 2 1 ]

C. Sharpen The opposite of Blur, the goal here is to make differences more
obvious:
K = 1 / 3 * [ 0 -2 0
              -2 11 -2
              0 -2 0 ]

D. Mean removal Similar with Sharpen, but this filter uses the diagonal pixels
as well:
K = [ -1 -1 -1
      -1  9 -1
      -1 -1 -1 ]

D. Emboss This filter is specifically used for edge detection. The following
matrix is focused on vertical edges and it is one of multiple emboss versions:
K = [ 0  1 0
      0  0 0
      0 -1 0 ]


Implementation details:
  Initially, process 0 reads the data in the picture and sends it to others
the dimensions of the matrices they will receive, and the type of image.
Process 0 splits the pixel array, sends a submatrix to
the other each process and apply the current filter to its portion of
the original matrix.
  The other processes wait in the first phase to receive the number of lines
and the columns of the matrices they will receive as well as the type of the image.
Next, each process expects to receive the pixel matrix,
apply the filter on it and send it back to process 0.

Usage:
  your@Desktop$ make
  your@Desktop$ mpirun -np nrProcs ./homework image_in.pnm image_out.pnm filter1 filter2 ... filterX
